/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id 'com.bmuschko.clover' version '2.2.3'

}

subprojects {
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"
    repositories {
        jcenter()
    }

    dependencies {
        implementation 'com.google.guava:guava:28.0-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        //testImplementation 'org.junit.platform:junit-platform-launcher:1.5.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
        clover 'org.openclover:clover:4.3.1'
        testCompile "org.mockito:mockito-core:2.+"
        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7+'
        // https://mvnrepository.com/artifact/org.postgresql/postgresql
        compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
        compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.14.Final'
        compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'
    }

    clover {
        compiler{
            additionalArgs = "-g:lines,source,vars"
        }
    }

    test {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }

    configurations {
        testPkg {
            extendsFrom(testRuntime)
        }
    }

    task testCode(type: Jar) {
        classifier = 'test'
        from sourceSets.test.output
    }

    artifacts {
        testPkg testCode
    }
}

// Project specific stuff
project (':shared') {
}

project (':server') {
    dependencies {
        implementation project(':shared')
        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}
/*
project (':client') {
    dependencies {
        implementation project(':shared')
        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}
*/
clover{
    enabled = true
    report {
        json = true
        html = true
    }
    compiler{
        additionalArgs = "-g:lines,source,vars"
    }
}

tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.withType(JavaCompile) {
    options.debug = true
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
            subProject.configurations.each { configuration ->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

